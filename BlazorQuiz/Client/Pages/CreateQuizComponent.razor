@page "/createquiz"
@using MudBlazor
@using System.Text.Json;
@using System.Text;
@using System.Net.Http.Headers;
@using BlazorQuiz.Shared.ViewModels
@using Models;

@inject HttpClient _http


<div class="ma-5 d-flex align-center justify-center">
    @* <MudImage Src="/images/317f578a-0daa-402d-b665-79625b337669.png" Width="200" Height="150" Alt="Swedish Farm House" Elevation="25" Class="rounded-lg ma-4" /> *@
    <MudGrid Class="d-flex align-center justify-center">
        <MudText Typo="Typo.h4">New Quiz</MudText>
        <MudItem xs="12" Class="d-flex align-center justify-center">
            <MudPaper Width="500px" Class="d-block pa-12">
                <MudText Typo="Typo.h5">Settings</MudText>
                <MudTextField T="string" Immediate="true" Label="Quiz Title" @bind-Value="options.QuizTitle" For="@(() => options.QuizTitle)" Required="true" RequiredError="Add a title!" />

                <MudToggleIconButton @bind-Toggled="@options.HasTimer"
                                     Icon="@Icons.Material.Filled.AlarmOff" Color="@Color.Error" Title="Off"
                                     ToggledIcon="@Icons.Material.Filled.AlarmOn" ToggledColor="@Color.Success" ToggledTitle="On" />
                                     
                <span>Question time limit @(options.HasTimer ? ReturnTimer(options.Timer) : "Off")</span>

                <MudSlider Disabled="@(!options.HasTimer)" Step="15" @bind-Value="options.Timer" Min="15" Max="120" Color="@(options.HasTimer ? Color.Success : Color.Dark)" />
         
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" Class="d-flex align-center justify-center">
            <MudPaper Width="500px" Class="d-block pa-12">
                <MudExpansionPanels>

                    @options.QuizTitle
                    @foreach (var item in quizList)
                    {
                        <MudExpansionPanel @key="@item.Question" Text="@item.Question" MaxHeight="150">
                            @item.CorrectAnswer
                        </MudExpansionPanel>
                    }

                </MudExpansionPanels>
                <MudText Typo="Typo.h5">Add a question</MudText>
   
                <MudForm Model="quiz" @ref="form" @bind-IsValid="@options.IsValidated">
                    <MudTextField T="string" Label="Question" @bind-Value="quiz.Question" For="@(() => quiz.Question)" Required="true" RequiredError="Add a quetsion!" />
                    <MudTextField Variant="Variant.Outlined" T="string" Label="Correct answer" @bind-Value="quiz.Answer1" For="@(() => quiz.Answer1)" Required="true" RequiredError="Required" />
                    <MudTextField T="string" Label="Incorrect answer 1" @bind-Value="quiz.Answer2" For="@(() => quiz.Answer2)" Required="true" RequiredError="Required" />
                    <MudTextField T="string" Label="Incorrect answer 2" @bind-Value="quiz.Answer3" For="@(() => quiz.Answer3)" Required="true" RequiredError="Required" />
                    <MudTextField Immediate="true" T="string" Label="Incorrect answer 4" @bind-Value="quiz.Answer4" For="@(() => quiz.Answer4)" Required="true" RequiredError="Required" OnChange="@(()=>form.Validate())" />
                    <MudExpansionPanels Class="mt-3">
                        <MudExpansionPanel>
                            <TitleContent>
                                <div class="d-flex">
                                    <MudIcon Icon="@Icons.Material.Filled.Settings" class="mr-3"></MudIcon>
                                    <MudText>Question options</MudText>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudToggleIconButton @bind-Toggled="@options.MediaQuestion"
                                                     Icon="@Icons.Material.Filled.ImageNotSupported" Color="@Color.Error" Title="Off"
                                                     ToggledIcon="@Icons.Material.Filled.Image" ToggledColor="@Color.Success" ToggledTitle="On" />

                                <span>@(options.MediaQuestion ? "This is a media question" : "This is a text question")</span>


                                <_Upload OnFileUpload="OnFileUploaded" IsActive="@options.MediaQuestion" />
                            </ChildContent>
          
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                    <MudTooltip Text="Add">

                        <MudFab Disabled="@(!(options.IsValidated && (!options.MediaQuestion || (options.MediaQuestion && !string.IsNullOrEmpty(quiz.QuizImageUrl)))))" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="AddQuestion" />
                    </MudTooltip>

                </MudForm>
            </MudPaper>
        </MudItem>
        @quiz.QuizImageUrl
        @* @quiz.QuizImageUrl.Length *@
        <MudButton Disabled="@(!options.HasQuestion)" Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateQuiz">Create Quiz</MudButton>
    </MudGrid>

</div>


@code {
    private MudTheme Theme = new MudTheme();
    private NewQuestionViewModel quiz = new NewQuestionViewModel();
    private List<NewQuestionViewModel> quizList = new List<NewQuestionViewModel>();
    MudForm? form;

    QuizOptions options = new QuizOptions(); //Set of settings to make the quiz work




    protected override async Task OnInitializedAsync()
    {

    }

    private void OnFileUploaded(string guid)
    {
        //Helper function to work with _Upload

        quiz.QuizImageUrl = guid;
        StateHasChanged();
    }



    private async Task CreateQuiz()
    {
        var newQuiz = new NewQuizViewModel()
            {
                Title = options.QuizTitle,
                Questions = quizList,
            };

        if (options.HasTimer)
        {
            newQuiz.Timer = (int)options.Timer;
        }
        else
        {
            newQuiz.Timer = 0;
        }

        var response = await _http.PostAsJsonAsync($"api/game/create", newQuiz);
    }

    private async Task AddQuestion()
    {
        var newQuestion = new NewQuestionViewModel(quiz);


        if (options.MediaQuestion)
        {
            newQuestion.QuizImageUrl = quiz.QuizImageUrl;
        }

        quizList.Add(newQuestion);

        await form.ResetAsync();
        options.HasQuestion = true;
        StateHasChanged();

        //Reset
        // Resetting the quiz object to its default state
        // quiz.Question = string.Empty;
        // quiz.Answer1 = string.Empty;
        // quiz.Answer2 = string.Empty;
        // quiz.Answer3 = string.Empty;
        // quiz.Answer4 = string.Empty;
        // quiz.QuizImageUrl = string.Empty;
        options.ResetToDefault();
        quiz.ResetToDefault();



    }


    private string ReturnTimer(double seconds)
    {
        string time;
        if (options.Timer > 59)
        {
            int min = (int)options.Timer / 60;
            int sec = (int)options.Timer % 60;


            time = $"{min} {(options.Timer == 60 ? "minute" : $"minutes {sec} seconds")}";

        }
        else
        {

            time = $"{options.Timer} seconds";
        }

        return time;
    }
}

@* TODO:
    [] Answer 1 also correct answer?
    [] IMG not required
    [/] Validate frontend
    [X] Timer (optional)
    [X] Rename add question button
*@