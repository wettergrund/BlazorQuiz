@page "/createquiz"
@using MudBlazor
@using System.Text.Json;
@using System.Text;
@using System.Net.Http.Headers;
@using BlazorQuiz.Shared.ViewModels
@using Models;
@using BlazorQuiz.Client.Pages.NewQuizComponents;
@inject NavigationManager _nav

@inject HttpClient _http


<div class="ma-5 d-flex align-center justify-center">
    
    <MudGrid Class="d-flex align-center justify-center">
        <MudText Typo="Typo.h4">New Quiz</MudText>
        @if (!String.IsNullOrEmpty(options.QuizGuid)){

        <ShareGame OnReset="ResetGame" Url="@url" />

        }
        else
        {
            
        
        <MudItem xs="12" Class="d-flex align-center justify-center">
            <MudPaper Width="500px" Class="d-block pa-12">
                <MudText Typo="Typo.h5">Settings</MudText>
                <MudTextField T="string" Immediate="true" Label="Quiz Title" @bind-Value="options.QuizTitle" For="@(() => options.QuizTitle)" Required="true" RequiredError="Add a title!" />

                <MudToggleIconButton @bind-Toggled="@options.HasTimer"
                                     Icon="@Icons.Material.Filled.AlarmOff" Color="@Color.Error" Title="Off"
                                     ToggledIcon="@Icons.Material.Filled.AlarmOn" ToggledColor="@Color.Success" ToggledTitle="On" />
                                     
                <span>Question time limit @(options.HasTimer ? ReturnTimer(options.Timer) : "Off")</span>

                <MudSlider Disabled="@(!options.HasTimer)" Step="15" @bind-Value="options.Timer" Min="15" Max="120" Color="@(options.HasTimer ? Color.Success : Color.Dark)" />
         
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" Class="d-flex align-center justify-center">
            <MudPaper Width="500px" Class="d-block pa-12">
                <MudExpansionPanels>

                    @options.QuizTitle
                    @foreach (var item in quizList)
                    {
                        <MudExpansionPanel @key="item.Question" Text="@item.Question" MaxHeight="150">
                            Correct answer: <b>
                            @item.CorrectAnswer

                            </b>
                        </MudExpansionPanel>
                         
             
                    }

                </MudExpansionPanels>
                <MudText Typo="Typo.h5">Add a question</MudText>
   
                  <QuizForm options="@options" quiz="@quiz" OnAddQuestion="HandleAddQuestion" />
    
            </MudPaper>
        </MudItem>
       
        <MudButton Disabled="@(!options.HasQuestion)" Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateQuiz">Create Quiz</MudButton>
        }
    </MudGrid>
</div>


@code {
    private MudTheme Theme = new MudTheme();
    private NewQuestionViewModel quiz = new NewQuestionViewModel();
    private List<NewQuestionViewModel> quizList = new List<NewQuestionViewModel>();

    MudForm? form;

    private async Task HandleAddQuestion(NewQuestionViewModel newQuestion)
    {
        var newQ = new NewQuestionViewModel()
            {
                Question = newQuestion.Question,
                Answer1 = newQuestion.Answer1,
                Answer2 = newQuestion.Answer2,
                Answer3 = newQuestion.Answer3,
                Answer4 = newQuestion.Answer4,
                QuizImageUrl = newQuestion.QuizImageUrl,
                CorrectAnswer = newQuestion.Answer1

            };
        quizList.Add(newQ);
        options.HasQuestion = true;
        StateHasChanged();
    }


    QuizOptions options = new QuizOptions(); //Set of settings to make the quiz work
    string url;



    protected override async Task OnInitializedAsync()
    {

    }

    private void OnFileUploaded(string guid)
    {
        //Helper function to work with _Upload

        quiz.QuizImageUrl = guid;
        StateHasChanged();
    }



    private async Task CreateQuiz()
    {
        var newQuiz = new NewQuizViewModel()
            {
                Title = options.QuizTitle,
                Questions = quizList,
            };

        if (options.HasTimer)
        {
            newQuiz.Timer = (int)options.Timer;
        }
        else
        {
            newQuiz.Timer = 0;
        }



        var response = await _http.PostAsJsonAsync($"api/game/create", newQuiz);

        var model = await response.Content.ReadFromJsonAsync<NewQuizViewModel>();
        options.QuizGuid = model.PublicId;
        url = $"{_nav.BaseUri}game/{model.PublicId}";

    }

    private async Task AddQuestion()
    {
        var newQuestion = new NewQuestionViewModel(quiz);


        if (options.MediaQuestion)
        {
            newQuestion.QuizImageUrl = quiz.QuizImageUrl;
        }

        quizList.Add(newQuestion);

        await form.ResetAsync();
        options.HasQuestion = true;
        StateHasChanged();

        options.ResetToDefault();
        quiz.ResetToDefault();

    }

    private async Task ResetGame()
    {
        options.NewGame();
        quizList = new List<NewQuestionViewModel>();

    }


    private string ReturnTimer(double seconds)
    {
        string time;
        if (options.Timer > 59)
        {
            int min = (int)options.Timer / 60;
            int sec = (int)options.Timer % 60;


            time = $"{min} {(options.Timer == 60 ? "minute" : $"minutes {sec} seconds")}";

        }
        else
        {

            time = $"{options.Timer} seconds";
        }

        return time;
    }
}
