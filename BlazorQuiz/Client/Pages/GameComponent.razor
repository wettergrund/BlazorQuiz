@page "/game/{id}"
@using MudBlazor
@using System.Text.Json;
@using System.Text;
@using System.Net.Http.Headers;
@using BlazorQuiz.Shared.ViewModels;
@inject HttpClient _httpClient
@inject ILocalStorageService _localStorage 


@if (quizData2.questions != null)
{
    <div class="ma-5 d-flex align-center justify-center">
        <MudGrid Class="d-flex align-center justify-center">
            <MudText Typo="Typo.h4">@quizData2.title</MudText>
            <MudItem xs="12" Class="d-flex align-center justify-center">
                <MudGrid>
                    <MudItem xs="12" Class="d-flex align-center justify-center">
                        <MudCard Style="width: 80vw; background: gray;">
                            <MudCardMedia Image="@quizData2.questions[count].QuizMediaUrl" Height="300" />
                            <MudCardContent>
                                <MudText Class="d-flex align-center justify-center" Typo="Typo.h5">@quizData2.questions[count].Question</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </MudItem>
            <MudItem xs="12" Class="d-flex align-center justify-center" Style="max-width: 80vw">
                <MudGrid>
                    <MudItem xs="6" Class="d-flex align-center justify-center">
                        <MudButton OnClick="() => SubmitAnswer(quizData2.questions[count].Answer1, 1)" Variant="Variant.Filled" Color="@alt1" Class="d-flex align-center justify-center mud-width-full py-8">@quizData2.questions[count].Answer1</MudButton>
                    </MudItem>
                    <MudItem xs="6" Class="d-flex align-center justify-center">
                        <MudButton OnClick="() => SubmitAnswer(quizData2.questions[count].Answer2, 2)" Variant="Variant.Filled" Color="@alt2" Class="d-flex align-center justify-center mud-width-full py-8">@quizData2.questions[count].Answer2</MudButton>
                    </MudItem>
                    <MudItem xs="6" Class="d-flex align-center justify-center">
                        <MudButton OnClick="() => SubmitAnswer(quizData2.questions[count].Answer3, 3)" Variant="Variant.Filled" Color="@alt3" Class="d-flex align-center justify-center mud-width-full py-8">@quizData2.questions[count].Answer3</MudButton>
                    </MudItem>
                    <MudItem xs="6" Class="d-flex align-center justify-center">
                        <MudButton OnClick="() => SubmitAnswer(quizData2.questions[count].Answer4, 4)" Variant="Variant.Filled" Color="@alt4" Class="d-flex align-center justify-center mud-width-full py-8">@quizData2.questions[count].Answer4</MudButton>
                    </MudItem>
                </MudGrid>
            </MudItem>
        </MudGrid>
    </div>
}
else
{
    <div class="ma-5 d-flex align-center justify-center">
        <p style="padding-top:200px">loading...</p>
    </div>
}




@code {
    [Parameter]
    public string id { get; set; }
    // [Parameter]
    // public GameQuizViewModel quizData { get; set; }

    //List<QuestionSharedViewModel> questions = new List<QuestionSharedViewModel>();
    GameQuizViewModel quizData2 = new GameQuizViewModel();

    bool gameFinnished = false;
    bool isCorrect;
    int count = 0;
    int score;
    MudBlazor.Color success = Color.Success;
    MudBlazor.Color wrong = Color.Error;
    MudBlazor.Color primary = Color.Primary;

    MudBlazor.Color alt1 { get; set; } = Color.Primary;
    MudBlazor.Color alt2 { get; set; } = Color.Primary;
    MudBlazor.Color alt3 { get; set; } = Color.Primary;
    MudBlazor.Color alt4 { get; set; } = Color.Primary;

    //List<GameQuizViewModel>? quizData = new List<GameQuizViewModel>();
    GuessCheckViewModel guess = new GuessCheckViewModel();
    List<GuessCheckViewModel> guesses = new List<GuessCheckViewModel>();


    protected override async Task OnInitializedAsync()
    {
        // var response = await _httpClient.GetAsync($"api/game/{id}");
        var response = await _httpClient.PostAsJsonAsync($"api/game/newgame/{id}", id);
        quizData2 = await response.Content.ReadFromJsonAsync<GameQuizViewModel>();
        //questions = quizData2.questions;
        Console.WriteLine($"Count: {count}, Questions Count: {quizData2.questions.Count}, quiz title: {quizData2.title}");
    }

    private async Task SubmitAnswer(string answer, int alternativ)
    {
        //Sets guess and call DB to check answer
        guess.Guess = answer;
        guess.GuessId = quizData2.questions[count].Id;
        await GuessCheck(guess);
        // Green if correct, red if wrong
        if (isCorrect == true){
            await CorrectColor(alternativ);
            StateHasChanged();
        }
        else
        {
            await WrongColor(alternativ);          
            StateHasChanged();
        }
        //Delay to veiw result then reset colour
        await Task.Delay(3000);
        await ResetColor(alternativ);       
        StateHasChanged();
        //Check if there are more questions left. If not submit score to DB.
        if (count < quizData2.questions.Count-1)
            count++;
        else
            await SubmitQuiz();
        //Send to gamefinished screen to show score
    }

    private async Task CorrectColor(int alternativ)
    {
        await Task.Run(() =>
        {
            switch (alternativ)
            {
                case 1:
                    alt1 = success;
                    break;
                case 2:
                    alt2 = success;
                    break;
                case 3:
                    alt3 = success;
                    break;
                case 4:
                    alt4 = success;
                    break;
            }
        });
    }

    private async Task WrongColor(int alternativ)
    {
        await Task.Run(() =>
        {
            switch (alternativ)
            {
                case 1:
                    alt1 = wrong;
                    break;
                case 2:
                    alt2 = wrong;
                    break;
                case 3:
                    alt3 = wrong;
                    break;
                case 4:
                    alt4 = wrong;
                    break;
            }
        });
    }

    private async Task ResetColor(int alternativ)
    {
        await Task.Run(() =>
        {
            switch (alternativ)
            {
                case 1:
                    alt1 = primary;
                    break;
                case 2:
                    alt2 = primary;
                    break;
                case 3:
                    alt3 = primary;
                    break;
                case 4:
                    alt4 = primary;
                    break;
            }
        });
    }

    private async Task GuessCheck(GuessCheckViewModel guess)
    {
        var response = await _httpClient.PostAsJsonAsync($"api/game/guess", guess);
        isCorrect = await response.Content.ReadFromJsonAsync<bool>();
        guesses.Add(guess);
    }

    private async Task SubmitQuiz()
    {
        var response = await _httpClient.PutAsJsonAsync($"api/game/gameresult", new { gameId = quizData2.gameId, guesses = guesses });
        // Add code to get data to present in score screen
    }
}
