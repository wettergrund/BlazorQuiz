@page "/game/{id}"
@using MudBlazor
@using System.Text.Json;
@using System.Text;
@using System.Net.Http.Headers;
@using BlazorQuiz.Shared.ViewModels;
@inject HttpClient _httpClient


@if (gameFinnished == true)
{
    <div class="ma-5 d-flex align-center justify-center">
        <p style="padding-top:200px">Final score: @score</p>
    </div>
}
else if (quizData.questions != null)
{
    <div class="ma-5 d-flex align-center justify-center">
        <MudGrid Class="d-flex align-center justify-center" Style="max-width: 600px">
            <MudText Typo="Typo.h4">@quizData.title</MudText>
          
            <MudItem xs="12" Class="d-flex align-center justify-center">
                <MudGrid>
                    <MudItem xs="12" Class="d-flex align-center justify-center">
                        <MudCard Style="width: 80vw; max-width: 600px; overflow: hidden; ">

                            @if(@media[count].Type.Contains("image")){
                                <MudCardMedia Image="@($"{mediaUrl}{media[count].Path}")" Height="300" />
                            }
                            else if (@media[count].Type.Contains("video"))
                            {
                              <_PlayVideo VideoPath="@media[count].Path" VideoType="@media[count].Type" ShowVideo=true/>
                            }


                            <MudCardContent>
                                <MudText Class="d-flex align-center justify-center" Typo="Typo.h5">@quizData.questions[count].Question</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </MudItem>
            @if (hasTimer)
            {

                <MudProgressLinear Color="@(currentTimer < timerStart / 2 ? Color.Secondary : Color.Primary )" Striped="true" Size="Size.Large" Value="@currentTimer" Min="0" Max="@timerStart" Class="my-7" />
            }
            <MudItem xs="12" Class="d-flex align-center justify-center" Style="max-width: 80vw">
                <MudGrid>
                    <MudItem xs="6" Class="d-flex align-center justify-center">
                        <MudButton OnClick="() => SubmitAnswer(quizData.questions[count].Answer1, 1)" Variant="Variant.Filled" Color="@alt1" Class="d-flex align-center justify-center mud-width-full py-8">@quizData.questions[count].Answer1</MudButton>
                    </MudItem>
                    <MudItem xs="6" Class="d-flex align-center justify-center">
                        <MudButton OnClick="() => SubmitAnswer(quizData.questions[count].Answer2, 2)" Variant="Variant.Filled" Color="@alt2" Class="d-flex align-center justify-center mud-width-full py-8">@quizData.questions[count].Answer2</MudButton>
                    </MudItem>
                    <MudItem xs="6" Class="d-flex align-center justify-center">
                        <MudButton OnClick="() => SubmitAnswer(quizData.questions[count].Answer3, 3)" Variant="Variant.Filled" Color="@alt3" Class="d-flex align-center justify-center mud-width-full py-8">@quizData.questions[count].Answer3</MudButton>
                    </MudItem>
                    <MudItem xs="6" Class="d-flex align-center justify-center">
                        <MudButton OnClick="() => SubmitAnswer(quizData.questions[count].Answer4, 4)" Variant="Variant.Filled" Color="@alt4" Class="d-flex align-center justify-center mud-width-full py-8">@quizData.questions[count].Answer4</MudButton>
                    </MudItem>
                </MudGrid>
            </MudItem>
        </MudGrid>
    </div>
}
else
{
    <div class="ma-5 d-flex align-center justify-center">
        <p style="padding-top:200px">loading...</p>
    </div>
}




@code {

    [Parameter]
    public string id { get; set; }

    GameQuizViewModel quizData = new GameQuizViewModel(); // contains quiz data
    List<MediaViewModel> media = new List<MediaViewModel>(); // contains media data
    GuessCheckViewModel guess = new GuessCheckViewModel(); // used to check guess then be added to guesses list
    List<GuessCheckViewModel> guesses = new List<GuessCheckViewModel>(); // used to store game data and

    bool gameFinnished = false;
    bool isCorrect;
    int count = 0;
    int score;
    bool hasTimer = false;
    int timerStart;
    int currentTimer;
    bool stoppTimer = false;
    string mediaUrl = "https://jwstoragelabs.blob.core.windows.net/blob/";

    // Colors for buttons
    MudBlazor.Color success = Color.Success; // green
    MudBlazor.Color wrong = Color.Error; // red
    MudBlazor.Color primary = Color.Primary; // purple (default)
    MudBlazor.Color alt1 { get; set; } = Color.Primary;
    MudBlazor.Color alt2 { get; set; } = Color.Primary;
    MudBlazor.Color alt3 { get; set; } = Color.Primary;
    MudBlazor.Color alt4 { get; set; } = Color.Primary;

    protected override async Task OnInitializedAsync()
    {
        var response = await _httpClient.PostAsJsonAsync($"api/game/newgame/{id}", id);
        quizData = await response.Content.ReadFromJsonAsync<GameQuizViewModel>();

        var questions = quizData.questions;
        var mediaClone = new MediaViewModel();
        
        foreach (var question in questions)
        {
            var newMedia = question.QuizMediaUrl;
            if (newMedia == "00000000-0000-0000-0000-000000000000")
            {
                mediaClone = new MediaViewModel()
                    {
                        Type = "",
                        Path = ""
                    };
            }

            else
            {
            var mediaRes = await _httpClient.GetAsync($"api/media/{newMedia}");
            var mediaObj = await mediaRes.Content.ReadFromJsonAsync<MediaViewModel>();
            mediaClone = new MediaViewModel()
                {
                    Type = mediaObj.Type,
                    Path = mediaObj.Path
                };
                
            }
            media.Add(mediaClone);
        }
        StartCountdown();
    }

    private async Task StartCountdown()
    {
        if (quizData.timer > 0)
        {
            hasTimer = true;
            timerStart = quizData.timer * 10;
            currentTimer = quizData.timer * 10;

            do
            {
                await Task.Delay(100);

                currentTimer -= 1;
                StateHasChanged();
            }
            while (currentTimer > 0 && !stoppTimer);

            if (currentTimer == 0)
            {
                await SubmitAnswer();
            }
        }
    }

    private async Task SubmitAnswer(string answer = "", int alternativ = -1)
    {
        // Sets guess variables
        stoppTimer = true;
        guess.Guess = answer;
        guess.GuessId = quizData.questions[count].Id;

        if (hasTimer)
        {
            guess.Seconds = CalculatedTimeElapsed();
        }
        // Call DB to check answer
        await GuessCheck(guess);

        if(alternativ == -1)
        {
            await TimeOut();
        }
        else
        {      
            // Green if correct, red if wrong
            if (isCorrect == true){
                await CorrectColor(alternativ);
                StateHasChanged();
            }
            else
            {
                await WrongColor(alternativ);          
                StateHasChanged();
            }
            //Delay to veiw result then reset colour
            await Task.Delay(3000);
            await ResetColor(alternativ);
            StateHasChanged();
        }
        
        //Check if there are more questions left. If not submit score to DB.
        if (count < quizData.questions.Count-1)
        {
            count++;
            ResetTimer();

            StateHasChanged();
        }
        else
            await SubmitQuiz();
        //Send to gamefinished screen to show score
    }

    private async Task TimeOut()
    {
        for(int i = 1; i <=4; i++)
        {
            await WrongColor(i);
            StateHasChanged();

        }
        await Task.Delay(3000);
        for (int i = 1; i <= 4; i++)
        {
            await ResetColor(i);
            StateHasChanged();

        }
    }


    private int CalculatedTimeElapsed()
    {
        int timeLeft = (int)Math.Ceiling(currentTimer / 10m);

        int timeElapsed = (timerStart / 10) - timeLeft;

        return timeElapsed; //Time elapsed in sec
    }

    private void ResetTimer()
    {
        stoppTimer = false;
        currentTimer = timerStart;
        StartCountdown();
    }

    // Set color green for selected answer
    private async Task CorrectColor(int alternativ)
    {
        await Task.Run(() =>
        {
            switch (alternativ)
            {
                case 1:
                    alt1 = success;
                    break;
                case 2:
                    alt2 = success;
                    break;
                case 3:
                    alt3 = success;
                    break;
                case 4:
                    alt4 = success;
                    break;
            }
        });
    }

    // Set color red for selected answer
    private async Task WrongColor(int alternativ)
    {
        await Task.Run(() =>
        {
            switch (alternativ)
            {
                case 1:
                    alt1 = wrong;
                    break;
                case 2:
                    alt2 = wrong;
                    break;
                case 3:
                    alt3 = wrong;
                    break;
                case 4:
                    alt4 = wrong;
                    break;
            }
        });
    }

    // Reset color for selected answer
    private async Task ResetColor(int alternativ)
    {
        await Task.Run(() =>
        {
            switch (alternativ)
            {
                case 1:
                    alt1 = primary;
                    break;
                case 2:
                    alt2 = primary;
                    break;
                case 3:
                    alt3 = primary;
                    break;
                case 4:
                    alt4 = primary;
                    break;
            }
        });
    }

    // Checks guess and return bool.
    // Then add guess with score to guesses (List<GuessCheckViewModel>)
    private async Task GuessCheck(GuessCheckViewModel guess)
    {
        var response = await _httpClient.PostAsJsonAsync($"api/game/guess", guess);
        isCorrect = await response.Content.ReadFromJsonAsync<bool>();
        var guessClone = new GuessCheckViewModel()
            {
                Guess = guess.Guess,
                GuessId = guess.GuessId,
                Seconds = guess.Seconds
            };
        guesses.Add(guessClone);
    }

    // Submits quiz, gamestate set to finnished and score will show.
    private async Task SubmitQuiz()
    {
        SubmitQuizViewModel submitQuiz = new()
            {
                gameId = quizData.gameId,
                guesses = this.guesses
            };

        var response = await _httpClient.PutAsJsonAsync($"api/game/gameresult", submitQuiz);
        score = await response.Content.ReadFromJsonAsync<int>();
        gameFinnished = true;
        StateHasChanged();
    }
}
